    ● class 정의 방법

        1단계 : 추상화 -> 멤버데이터가 무엇이 필요할까 -> 찾아내는 작업 -> 키추출, 후보리스트 작성

        2단계 : 캡슐화(정보은닉) -> 1단계 리스트를 클래스 다이어그램에 배치.
                -> instance 멤버를 만들어서 넣는 것이 캡슐화
              -> instance member variable ( = non-static variable) : 인스턴스 되기전에는 사용할 수 없는 변수.
        
              ** OOP의 모든 개념은 instance 변수에만 적용한다.

              - static 변수나 상수는 인스턴스 변수가 아니다.
                 -> static 변수는 인스턴스 멤버 변수를 관리하기 위하여 존재한다.

              - 처음에 키추출로 instance 변수를 뽑아내고, 이후에 이 변수들을 관리하거나 공유되는 부분이 있으면 static 변수로 뽑아낸다.


    ● 정보은닉(Information Hiding)
	
        - Data Hiding (필수!)

        - Implemontation Hiding (구현부)
          --> OOP적 관점에서는 선택이지만, 실제로는 중요한 메소드는 숨기는것이 당연하다! 핵심 기술들을 공개 할 순 없으니까!

          ┌──────────────┐
          │  ┏━━━━━━━━┓  │
          │  ┃////////┠──┼────→ · 데이터의 접근제어자를 private로 hiding하고 그 데이터를 제어하기 위한 메소드(getter, setter 메소드)를 만드는것이 캡슐화이다.
          │  ┗━━━━┯━━━┛  │   
          │  ┌────┴───┐  │
          │  │        │  │
          │  │        │  │
          │  └────────┘  │
          └──────────────┘
	  
        - 모든 멤버 data를 private으로 하고 모든 data의 set, get 메소드를 만드는것이 기본 룰이다.

    ● 클래스 선언의 기초 문법.
		
        - 프로그램의 요구사항을 분석하고 설계하는 과정.
	
        ① 정보수집 단계(프로그램 시장성 조사)

         -1. 벤치마킹(사전조사) ─→ ①프로그램 타겟(사용자)에게 설문 & 인터뷰 or 업부담당자, 프로그램 공급자.
                 ↓
         -2. 요구사항 분석      ─→ ②요구사항 분석서      ──┐
                                  ③프로젝트 제안서        │구체화
         -3. 유즈케이스 모델링  ─→ ④유즈케이스 다이어그램 ←─┘        │ 여기까지는 모든 문서가 
                 │               │⑤유즈케이스 spec             ────┘  ①번 사람들 대상(고객) 
                 │               └→ 모든 문서로 추상화 작업(키추출)    
                 ↓
         -4. 클래스 모델링 : 추상화 리스트 필요.    · 키추출해서 한글(영문)클래스다이어그램 만드 것 까지가 분석단계(70%)


    --------------------------------------------------------------------------------------------------------------------------------


    ○ 변수 선언 구문.

        - [ 제어자 ]  type 식별자 
           -> modifier  -> 1. private, public, protected, (default) (access modifier 접근제어자)  --> 반드시 1개는 지정해야 한다. 지정하지 않을경우에는 default가 기본.
                        -> 2. static ...
                        -> 3. final ...
 
           제어자 자리에는 n개가 올 수 있는데, 이때 제어자들의 순서는 상관이 없다. -> 하지만 보통 access modifier부터 작성한다.
           	private final  ==  final private
	    
	    - 제어자의 위치
	    	변수 : type 앞에	                ex) private int num;
	    	메소드 : return type 앞에        ex) public void prn();



    ○ 생성자

      · 생성자란? what?
	
        - 객체가 생성(instance 구문)하고 나서 객체의 데이터들의 초기화 작업을 하는 것.
        - 생성자의 이름은 반드시 클래스 명광 같아야 하고, 리턴 타입이 없다(void도 없다!).

                     no-arg Constructor ←─ compile 타임에 byte 코드를 자동으로 추가
                                              ↑         
        - 유저가 생성자 함수를 정의하지 않으면 Jave 컴파일러가 디폴트 생성자를 자동으로 생성하지만 유저가 하나라도 정의한다면 그것이 디폴트 생성자이든 오버로디드 생성자이든
          컴파일러가 추가로 생성자를 만들지 않는다. 그러므로 user defined Constructor를 하나라도 만든다면 반드시 default Constructor를 만들어야 한다.

      ·this (참조) Keyword (this reference)
      ┌ this. (변수 or 메소드) : 생성자 함수 바디 내부와 인스턴스 메소드. 바디 내부에서만 사용가능. ─→ static 함수내에서는 사용불가!
      │ 
      └	this (parameter list) : 생성자 함수 바디 내부에서만 사용가능. 단, 재귀호출은 안된다.
        │
        │
        └→ 자신을 제외한 오버로딩 된 다른 생성자를 호출할 때 사용한다.
        
        * 생성자 안에 쓰는 생성자 호출문은 반드시 그 생성자의 첫 번째 명령문 이어야 한다.