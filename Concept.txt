● 자바 기본 개념

○ 자바란.

	1. Java는 플랫폼이다. -> 동적 바인딩 '메모리 관리'의 중요성.
		- Javas는 가상플랫폼 없이는 구동할 수 없다.

	2. Java는 객체지향 언어이다.




○ Java 프로그램 작성과정.

	1. 자바소스 작성 -> *.java (자바 파일명은 Class명과 동일해야한다.)
		javac *.java (커멘드)


	2. 컴파일 -> class 파일 생성
		*.java -> *.class

	3. 실행
		java 클래스명 (.class 포함 x)




○ Compile
	
	- 모든 언어는 소스코드를 기계어코드(binary code)로 번역하는 방법을 가지고 있다.

	1. compile (통째 번역 방식)
		- 모든 소스코드를 컴파일 한 후에 실행한다.

		- source code -> byte code
		*.java -> *.class -> *.jar

	2. interprete (의미있는 명령어 단위 번역 방식)
		- 프로그램이 실행한 후, 필요한 부분들을 순차적으로 컴파일한다.

		- byte code -> binary code

	- Java는 2가지 방법을 모두 사용한다. 그래서 Two Face Language 라고도 한다.
	  컴파일 시에는 compile 방식이 사용되고, 실행시에는 interprete 방식이 사용된다.




○ Java 프로그램 작동원리

	- Java Compiler
		자바 가상기계(JVM : Java Virtual Machine)에 맞게 소스코드(원본)를 가상기계어(byte code)로 컴파일 한다.
		JVM은 실시간으로 byte code를 binary code로 바꾼다.

	|                   |
	| Java Source Code  |
	|-------------------|
	|       JVM         |   -> logical platform
	|------^^^^^--------|   
	|       OS          |   -> 하드웨어 조작
	|-------------------|
	|     Hard Ware     |   -> physical platform (물리적 실제 플랫폼)
	|-------------------|

	* 자바 프로그램은 플랫폼에는 독립적이지만 자바가상기계(JVM)에는 종속적이다.
	  -> 자바 프로그램은 플랫폼에 독립적이기 때문에 플랫폼의 종류에 상관없이 실행할 수 있다. --> 크로싱 플랫폼이 가능하다.
	     단, JVM에는 종속적이기 때문에 실행되는 플랫폼에 해당하는 JVM이 설치되어 있어야한다.




○ Java에는 true와 false를 나타내는 Keyword가 존재한다.

	- Java는 C/C++ 처럼 비트단위로 연산하는 것이 아니라, 바이트 단위로 연산하기 때문에 1과 0으로 참, 거짓을 판별할 수 없다.
	  그래서 x==1 처럼 사용하는 것이 불가능하고, x==true 처럼 사용해야한다.
	  조건식도 마찬가지로 while(true) 처럼 사용해야 한다.

○ Java는 Call by Value 밖에 없다.

	- 자바는 Stack영역 값 Copy밖에 되지 않는다.(Call by Value)
	- 자바는 Call by Value 밖에 안일어 나기 때문에 객체들을 함수에 
	  주고 받으면 얕은 복사가 일어난다.
	- 객체는 Stack 영역이 아닌 heap 영역에 할당되므로 값 copy가 되지 않는다.
	   ↓
	  자바에서 객체란 : 하나의 공간에 하나의 데이터가 들어가는것. (Primitive type)을 제외하고는 모두 객체.











