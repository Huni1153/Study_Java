    ● 메소드 오버로딩
                        1개 클래스, 동일 식별자, 시그니처 다르다.    
                      ↗
    ┌ 오버로딩 (Overloading) ─→ OBC (클래스 1개 디자인 할때)
    │    │
    │    └→ 한 클래스 내에 똑같은 이름의 메소드를 여러개 선언·정의 하는 것.
    │
    └ 오버라이딩 (Overriding) ─→ OOC (클래스 관계 n개 ↑ : 상속)

       ·시그니처 = 메소드 이름(식별자) + 파라미터의 개수, 타입, 순서
                                                              └→ (char,int) != (int,char)

    dot operator 없이 함수를 호출할 수 있는 경우.
    - 함수 내에서 그 함수와 같은 레벨의 함수를 호출할 때.

    ┌─────────────────┐
    │ A               │┌─→ main()내에서 printInfo()를 호출하면 (A.)printInfo() 즉, A.가 생략되어 있는 것.
    ├─────────────────┤│   ─→ main()과 printInfo()가 같은 static level이기 때문에 dot operator 없이 호출이 가능하다.
    │  ፧         　　　││ 
    ├─────────────────┤│ ┌─→ printlnInfo()는 instance 함수이기 때문에 그냥 호출하면 Error!!
    │ +main()       ──┼┘ │   A obj = new A()   ─ 이렇게 객체 생성을 하고 
    │ +preintInfo()   │  │   A.printlnInfo()로 사용해야 한다.
    │ +preintlnInfo()─┼──┘
    └─────────────────┘



    · 캡슐화가 적용되는 인스턴스 객체의 구성요소 │ · 클래스 객체 구성요소 
      Instance Field (Non-static)　  　  　   │   static Field 
        ↓ 초기화                              │    ↓ 초기화
      Constructor    (heap 초기화)            │   Static block(initailized)
      Instance Method       　 　　           │   Static Method
      (setter getter 포함)　　　      　　　 　│   (Static setter getter)
                         　 　　　　　 　 　 　│    ↓
                         　 　　　　　 　 　 　│    static도 Information Hiding

                       * 인스턴스 객체가 로딩되기 전에 클래스 객체가 먼저 올라간다.

                                         ┌────────────┐
                                         │     A      │
                                         ├────────────┤
                                         │ a:int      │
                                         │ starA:int  │
                                         ├────────────┤
                                         │  ፧  　  　　│
                                         └────────────┘
                                    ↗
                        ┌─────A─────┐
                        │ starA:int ┼─→ static 변수라서 각 instance 객체에 포함되지 않는다.
           ┌────────────┤ 클래스 　　├─────────────┐
           │            └─────┬─────┘             │
     ┌─────┴───┐        ┌─────┴───┐         ┌─────┴───┐
     │  obj1   │        │  obj2   │         │  obj3   │
     │ new A() │        │ new A() │         │ new A() │
     │  ┌───┐  │        │  ┌───┐  │         │  ┌───┐  │
     │  │ A │  │        │  │ A │  │         │  │ A │  │
     │  └───┘  │        │  └───┘  │         │  └───┘  │
     └─────────┘        └─────────┘         └─────────┘

     ┌─────────────────────────────┐
     │             A               │         
     ├─────────────────────────────┤   · static block은 캡슐화 하는것이 아니기 때문에 클래스 다이어그램에 표기하지 않는다.
     │ -instanceVar:int            │
     │ -staticVar:int              │
     ├─────────────────────────────┤    public static getStaticVar(){
     │ +A()                        │        return staticVar;
     │ +A(instanceVar:int)         │    }         ↑ 
     │ +set ~ ()                   │              │
     │ +get ~ ()                   │        절대 this.을 쓰지 않는다.
     └─────────────────────────────┘       (A.) 클래스 명으로 접근해야 한다.



     static     │     stack     │  heap
   ─────────────┼───────────────┼───────────
   staticVar    │ obj1 ┌────┬--─┼--┌─10─┐
   ┌───────┐    │      └────┘   │  └────┘ 
   │   30  │    │ obj2 ┌────┬--─┼--┌─20─┐
   └───────┘    │      └────┘   │  └────┘ 


   - static 영역은 프로그램 실행하기 전에 필요한 공간의 할당이 모두 끝난다.
     그 이후로는 이미 할당된 공간에 접근만 가능하지 새로운 공간을 할당하는 것은 불가능하다!
       ↓
     클래스이 함수에 대한 정보가 저장이 되어 있다가 함수를 호출하게 되면 그 함수의 정보로 함수 공간을 할당하게 된다.
     ─→ 그러므로 함수내에 static 변수가 있으면 static 영역에 함수를 호출할 때 마다 다시 할당하는 것이 된다.





     ● modifier   추가 필기
       수정자 → 객체지향의 룰을 수정하는자.
      · modifier (제어자,지정자) : n개를 지정해서 사용가능
        - access control : public, private, protected, default
           └→ 반드시 1개는 지정. └─────┴─────┬────┴──────┘  └→ 코드에서 생략할때 자동. UML에서 기호는 (~)이다 
              　　  　     　     　  　  　 │
              　　  　     　     　  　  　 ↓
                         access level(접근등급) ─→ information hiding 할때.
                                                        ↙   ↘
                                                   데이터     구현부
                                                   (필수)     (선택)
     
        사용 위치 ┌ 변수 : type 앞에                  ┐
        (선언)　　│   　 　　　                       ├─→ 여러개를 혼용해서 사용할 떄 순서는 상관 없다. 
         　 　　　└ 메소드 : return type 앞에　　　　　┘   하지만 보통 accecss contorl 부터.

     ● final     추가 필기

      · final을 멤버변수로 사용할 때.
  
             ┌ instancefield : 생성과 동시에 초기화해서 인스턴스 메소드가 고정값 사용.
    　목적　　│                  ─→ 생성자에서 초기화
       │     └ static field  : static Method 에서 호출되기 전에 값 고정.
       │                         ─→ static block 에서 초기화
       │
       ↓
       초기화 1번해서 고정값 사용.
