    ● 메소드 오버라이딩

      · 상속관계 - 자식클래스는 부모클래스(타입종류)이다.    Lv   =   Rv
                      (자식 is A 부모)                 부모타입   자식객체

      - 상속관계에서 자식클래스는 부모클래스의 메소드와 동일한 시그니처의 메소드 정의가 가능하다 [오버라이딩] -> 오버로딩과 햇갈리지 말 것!


       JVM은 Vitual Method Invoation(가상 메소드 호출) 실행시 (최종) 재정의된 메소드를 호출한다.

      · 생성자 호출 순서
        1. super 생성자 호출
        2. this 생성자 호출

      (문법 표현)  자식타입 obj = new 자식타입();
      -> 문법상 보기에는 자식생성자가 호출되는 것 처럼 보이지만 내부적으로는 부모생성자가 (super 생성자)가 호출이 먼저된다.


      ┌ 컨크릿 클래스 : 생성이 가능한 클래스
      │
      └ abstract 클래스  : 생성불가 (instance X) -> 반드시 상속하기 위한 클래스. 인스턴스화를 sub class에 위임한 abstract class
         └→ 컨크리 클래스들에 대해 일반화가 적용된 (대표)클래스.
         -> 클래스들의 공통특성을 모아서 일반화된 super class로 만들어진 경우.

         why? 일반화된 타입을 이용해서 다형성을 적용(구현)하기 위한 목적.
         abstract class ┌ 1. 클래스 앞에만 키워드가 붙어있는 경우.
                        │    - 더이상 instance화를 시킬 필요가 없지만 상속관계에 사용되는 경우.  ex) 은행계좌
                        └ 2. abstract Method를 1개이상 표현한 경우.
                             - 반드시 오버라이딩(구현)해서 사용해야 한다.

      · 추상메소드 : 메소드의 바디가 없는 함수

        - abstract class
          1. 작동하던 class가 더이상 새로운 객체는 생성하지 못하게 하지만 다른 자식 class들 때문에 남겨두는 class(상속으로만 사용)
          2. 자식 class들에게 각자의 기능을 구현하게 하기위한 Method를 표함하고 있는 class


           ┌────────────────────┐                      ┌────────────┐ 
           │ AbstractSuper      │                      │     sub    │       
           ├────────────────────┤                      ├────────────┤
           │ ፧　　     　        │　 ◁──────────────　　│ ፧    　　   │   
           │                    │                      │            │
           ├────────────────────┤                      ├────────────┤
           │  a() <<추상메소드>> ┼─┐                    │ ፧　 　 　   │  
           └────────────────────┘ │                    └────────────┘   
                                  └→ 오버라이딩을 하지 않으면 컴파일러가 a()를 그대로 넣게된다.
                                                               └ abstract public class Sub extends AbstrctSuper
                                                                 그렇게 되면 sub class도 abstract 키워드를 붙여야 한다.

          ※ 오늘의 핵심
            1. abstract 와 관련된 것
                      class , method
            2. abstract 클래스와 컨크리 클래스를 비교해서 적용
            3. abstract 키워드를 사용하면 왜 instance가 안되는가? 룰이니까!
            4. abstract class 개념정리
