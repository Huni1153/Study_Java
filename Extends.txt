    ● OOP 적용목적

    - 재사용성과 확장성을 높이기 위해서 => 유지보수의 비용절감
          │        └─→ 검증된 코드를 확장
          ↓
     검증된 코드를 그대로 쓰거나
                │
                ↓
    디자인 패턴 : 클래스를 역할분리하고 확장하는 방법.
      (클래스)    (클래스를 쪼개는 기준)
         │
         ↓
    Framwork (패턴목록)  ─→  OOP를 공부해야하는 이유.

    · 상속구조 : 기존의 코드(≒이미 존재하는 클래스) + 확장코드(≒클래스 연동방법)
        │  ─→ extension 구조(클래스 확장구조)
        ↓
      상속개념 + 클래스 확장구조
        │
        ↓
      inheritance : 객체의 재산상속
                            └→ inheritance는 data에 적용되는 것.


    · 포함과 상속 관게

     - 포함관계      Has -A relationship



      A의 인스턴스화 + B 인스턴스화
             new           new


     ┌────────────┐                      ┌────────────┐ 
     │     A      │                      │     B      │       
     ├────────────┤                      ├────────────┤
     │ a:int      │　 ◇──────────────　　│ b:int      │   
     │            │                      │            │
     ├────────────┤                      ├────────────┤
     │  a()       │                      │  b()       │  
     └────────────┘                      └────────────┘   

     ─→ 포함관계에서는 각 객체의 생성시기 즉, 메모리 로딩 시점이 중요하다.

     - 상속관계     Is -A relationship -> 전제조건 : Polymorphism
                      A(자식)   B(부모)                 (다형성)
                      (sub is a kind of super)

             자식 type 참조로 무보,자식 모두 접근 가능.

             -> super와 sub가 한몸
 
                      class A extends B
                           
         new A()                            new B()
     ┌────────────┐                      ┌────────────┐ 
     │     A      │                      │     B      │       
     ├────────────┤                      ├────────────┤
     │ a:int      │　 ──────────────▷　　│ b:int      │   화살표가 가리기는 곳이 부모클래스 이다
     │            │                      │            │
     ├────────────┤                      ├────────────┤
     │  a()       │                      │  b()       │  
     └────────────┘                      └────────────┘     

     ─→ 메모리 공간 상에서는 data만 확장되고 함수는 공유하는 개념  




    - 다형성 구조가 나오지 않는다면 상속관계로 정의하지 말 것.
    - Is -A kind of relationship 이 논리적으로 성립된다면 상속가능.
    - 클래스의 대표 타입의 함수로 자식 클래스들은 모두 control 할 것이 아니라면 상속관계를 사용하지 않는다.
    